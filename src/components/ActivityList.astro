---
---

<div id="activities-container" aria-live="polite">
    <p id="loading-message">Loading activities...</p>
    <ul id="activity-list" class="activity-list hidden"></ul>
    <p id="error-message" class="error-message hidden"></p>
</div>

<script>
    let retryCount = 0;
    const maxRetries = 3;

    function formatDate(dateString: string): string {
        const date = new Date(dateString);
        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
        return date.toLocaleDateString(navigator.language, options);
    }

    interface Activity {
        title: string;
        date: string;
        description: string;
        link: string;
    }

    async function fetchActivities(): Promise<void> {
        const startTime = performance.now();
        
        const container = document.getElementById('activities-container');
        const loadingMessage = document.getElementById('loading-message');
        const activityList = document.getElementById('activity-list');
        const errorMessage = document.getElementById('error-message');

        if (!container || !loadingMessage || !activityList || !errorMessage) {
            console.error('One or more required elements not found');
            return;
        }

        loadingMessage.classList.remove('hidden');
        activityList.classList.add('hidden');
        errorMessage.classList.add('hidden');

        try {
            const fetchStartTime = performance.now();
            const response = await fetch('/.netlify/functions/getStravaActivities');
            const fetchEndTime = performance.now();
            console.log(`Fetch time: ${fetchEndTime - fetchStartTime}ms`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const jsonStartTime = performance.now();
            const activities: Activity[] = await response.json();
            const jsonEndTime = performance.now();
            console.log(`JSON parsing time: ${jsonEndTime - jsonStartTime}ms`);

            loadingMessage.classList.add('hidden');

            const renderStartTime = performance.now();
            if (activities.length > 0) {
                activityList.innerHTML = activities.map(activity => `
                    <li class="activity-item">
                        <h3><b>${activity.title}</b></h3>
                        <p>Date: ${formatDate(activity.date)}</p>
                        <p>${activity.description}</p>
                        <a href="${activity.link}" target="_blank" rel="noopener noreferrer">View on Strava</a>
                    </li>
                `).join('');
                activityList.classList.remove('hidden');
            } else {
                errorMessage.textContent = 'No recent activities found.';
                errorMessage.classList.remove('hidden');
            }
            const renderEndTime = performance.now();
            console.log(`Render time: ${renderEndTime - renderStartTime}ms`);
        } catch (error) {
            console.error('Error fetching activities:', error);
            loadingMessage.classList.add('hidden');
            if (retryCount < maxRetries) {
                retryCount++;
                errorMessage.textContent = `Error loading activities. Retrying... (Attempt ${retryCount}/${maxRetries})`;
                errorMessage.classList.remove('hidden');
                setTimeout(fetchActivities, 3000); // Retry after 3 seconds
            } else {
                errorMessage.textContent = 'Failed to load activities. Please try again later.';
                errorMessage.classList.remove('hidden');
            }
        }

        const endTime = performance.now();
        console.log(`Total execution time: ${endTime - startTime}ms`);
    }

    document.addEventListener('DOMContentLoaded', fetchActivities);
</script>

<style>
    .activity-list {
        list-style-type: none;
        padding: 0;
        display: grid;
        gap: 1.5rem;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        opacity: 0;
        transform: translateY(20px);
        animation: fadeIn 0.5s ease-out forwards;
    }
    @keyframes fadeIn {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .activity-item {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: box-shadow 0.3s ease, transform 0.3s ease;
    }
    .activity-item:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    h3 {
        margin-top: 0;
        margin-bottom: 0.5rem;
        font-size: 1.2rem;
    }
    p {
        margin: 0.5rem 0;
    }
    a {
        display: inline-block;
        margin-top: 0.5rem;
        color: #0077cc;
        text-decoration: none;
        transition: color 0.3s ease;
    }
    a:hover {
        color: #005fa3;
        text-decoration: underline;
    }
    .error-message {
        color: #d32f2f;
        font-weight: bold;
    }
    .hidden {
        display: none;
    }
    @media (max-width: 600px) {
        .activity-list {
            grid-template-columns: 1fr;
        }
    }
</style>